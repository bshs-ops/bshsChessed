generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?
  role      Role     @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id             String          @id @default(cuid())
  name           String          @unique
  type           GroupType       @default(FUND)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  budgets        Budget?
  donations      Donation[]
  expenses       Expense[]
  participations Participation[]
  presetQRCodes  QRCode[]        @relation("PresetGroupQRCodes")
  sales          Sale[]
}

model Donor {
  id             String          @id @default(cuid())
  name           String
  className      String
  gradeName      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  donations      Donation[]
  participations Participation[]
  qrCode         QRCode?         @relation("DonorIdentityQR")

  @@index([className])
  @@index([gradeName])
}

/// ===== QR Codes =====
///    - IDENTITY: linked to a Donor
///    - PRESET:   linked to (group + amount) so scanning applies that preset
model QRCode {
  id            String   @id @default(cuid())
  value         String   @unique
  type          QRType
  donorId       String?  @unique
  presetGroupId String?
  presetAmount  Decimal? @db.Decimal(10, 2)
  label         String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  storagePath   String
  qrCodeUrl     String
  donor         Donor?   @relation("DonorIdentityQR", fields: [donorId], references: [id])
  presetGroup   Group?   @relation("PresetGroupQRCodes", fields: [presetGroupId], references: [id])
}

model Donation {
  id        String         @id @default(cuid())
  donorId   String
  groupId   String
  amount    Decimal        @db.Decimal(10, 2)
  source    DonationSource @default(SCAN)
  scannedAt DateTime       @default(now())
  donor     Donor          @relation(fields: [donorId], references: [id])
  group     Group          @relation(fields: [groupId], references: [id])

  @@index([donorId])
  @@index([groupId])
  @@index([scannedAt])
}

/// ===== Budgets =====
///    - GROUP   ties to a specific Group.
model Budget {
  id        String   @id @default(cuid())
  amount    Decimal  @db.Decimal(12, 2)
  groupId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group?   @relation(fields: [groupId], references: [id])
}

model Expense {
  id            String        @id @default(cuid())
  date          DateTime      @default(now())
  amount        Decimal       @db.Decimal(12, 2)
  description   String?
  fundingSource FundingSource
  groupId       String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  group         Group?        @relation(fields: [groupId], references: [id])

  @@index([groupId, date])
}

/// ===== Sales (per group) =====
///    Tracks fundraisers: cost vs revenue -> profit in queries.
model Sale {
  id            String        @id @default(cuid())
  groupId       String
  item          String
  qty           Int           @default(1)
  unitCost      Decimal       @db.Decimal(10, 2)
  totalCost     Decimal       @db.Decimal(12, 2)
  revenue       Decimal       @db.Decimal(12, 2)
  fundingSource FundingSource
  date          DateTime      @default(now())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  group         Group         @relation(fields: [groupId], references: [id])

  @@index([groupId, date])
}

/// ===== Participation (for VOLUNTEER group) =====
model Participation {
  id      String   @id @default(cuid())
  donorId String
  groupId String
  date    DateTime @default(now())
  donor   Donor    @relation(fields: [donorId], references: [id])
  group   Group    @relation(fields: [groupId], references: [id])

  @@index([groupId, date])
  @@index([donorId, date])
}

enum Role {
  ADMIN
  USER
}

enum QRType {
  IDENTITY
  PRESET
}

enum GroupType {
  FUND
  VOLUNTEER
}

enum DonationSource {
  SCAN
  MANUAL
}

enum FundingSource {
  RAISED
  SPONSORED
  BUDGET
  COLLECTED
}
